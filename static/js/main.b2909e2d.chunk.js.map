{"version":3,"sources":["selectors.js","components/BasicExampleWrapper.js","../../src/ReduxInputContext.js","../../src/ReduxInput.js","actions.js","components/BasicExample.js","components/ActOnExampleWrapper.js","components/ActOnExample.js","components/ReduxInputContextExampleWrapper.js","components/ReduxInputContextExample.js","components/Page.js","reducer.js","App.js","index.js"],"names":["selectors","basicExampleStore","state","basic","example","input","basicExampleInput","actOnExampleStore","actOn","contextExampleStore","contextExample","input1","input2","BasicExampleWrapper","children","useSelector","className","language","style","docco","outdent","JSON","stringify","Context","React","ReduxInputContext","Component","props","value","contextSelector","contextAction","action","ReduxInput","valueProp","rest","dispatch","useDispatch","useContext","selector","path","toPath","formattedValue","format","onChangeValue","eventValue","nextValue","parsedValue","parse","finalPayload","assocPath","fallbackSelector","always","toLodashPath","step","String","Number","actions","basicExampleInputChange","createAction","actOnExampleInputChange","contextExampleInputChange","BasicExample","DatePicker","size","ActOnExampleWrapper","ActOnExample","Radio","Group","padding","Button","ReduxInputContextExampleWrapper","store","ReduxInputContextExample","Select","placeholder","minWidth","marginLeft","Option","TabPane","Tabs","Page","defaultActiveKey","animated","tab","key","INITIAL_STATE","reducer","combineReducers","createReducer","_","payload","configureStore","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b2909e2d.chunk.js","sourcesContent":["const basicExampleStore = (state) => ({\n  basic: { example: { input: state.basic.example.input } }\n})\nconst basicExampleInput = (state) => state.basic.example.input\nconst actOnExampleStore = (state) => ({\n  actOn: { example: { input: state.actOn.example.input } }\n})\nconst actOn = (state) => state.actOn\nconst contextExampleStore = (state) => ({\n  contextExample: {\n    example: {\n      input1: state.contextExample.example.input1,\n      input2: state.contextExample.example.input2\n    },\n  }\n})\nconst contextExample = (state) => state.contextExample\n\nconst selectors = {\n  basicExampleStore,\n  basicExampleInput,\n  actOnExampleStore,\n  actOn,\n  contextExampleStore,\n  contextExample,\n}\n\nexport default selectors\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport outdent from 'outdent'\nimport SyntaxHighlighter from 'react-syntax-highlighter';\nimport { docco } from 'react-syntax-highlighter/dist/esm/styles/hljs';\n\nimport selectors from '../selectors'\n\nconst BasicExampleWrapper = ({ children }) => {\n  const basicExampleStore = useSelector(selectors.basicExampleStore)\n  return (\n    <div className='Flex'>\n      <div className='Rendered'>\n        <h4>Basic example (using Ant Design DatePicker): </h4>\n        {children}\n        <br />\n        <br />\n        <br />\n        <br />\n        <SyntaxHighlighter language='javascript' style={docco}>\n          {outdent`\n              import React from 'react'\n              import { ReduxInput } from 'redux-input'\n              import { DatePicker } from 'antd'\n\n              import selectors from '../selectors'\n              import actions from '../actions'\n\n              const BasicExample = () => {\n                return (\n                  <ReduxInput\n                    Component={DatePicker}\n                    selector={selectors.basicExampleInput}\n                    action={actions.basicExampleAction}\n                  />\n                )\n              }\n            `}\n        </SyntaxHighlighter>\n        <h4>Setup:</h4>\n        <SyntaxHighlighter language='javascript' style={docco}>\n          {outdent`\n              // selectors.js\n              const basicExampleInput = (state) => state.basic.example.input\n\n              // actions.js\n              const basicExampleAction = (payload) => ({\n                type: 'BASIC_EXAMPLE/CHANGE',\n                payload,\n              })\n\n              // reducer.js\n              import { createReducer } from '@reduxjs/toolkit'\n\n              combineReducers({\n                input: createReducer(null, {\n                  'BASIC_EXAMPLE/CHANGE': (_, { payload }) => payload\n                })\n              })\n            `}\n        </SyntaxHighlighter>\n\n      </div>\n\n      <div>\n        <h4>STORE STATE: </h4>\n        <pre>{JSON.stringify(basicExampleStore, null, 2)}</pre>\n      </div>\n    </div>\n  )\n}\n\nexport { BasicExampleWrapper }\n","import React from 'react'\n\nconst Context = React.createContext()\n\nconst ReduxInputContext = ({\n  selector,\n  action,\n  children,\n  Component = React.Fragment,\n  ...props\n}) => (\n  <Component {...props}>\n    <Context.Provider\n      value={{ contextSelector: selector, contextAction: action }}\n    >\n      {children}\n    </Context.Provider>\n  </Component>\n)\n\nexport { ReduxInputContext, Context }\n","import { toPath as toLodashPath } from 'lodash'\nimport { path, assocPath, always } from 'ramda'\nimport React, { useContext } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { Context, ReduxInputContext } from './ReduxInputContext'\n\n/**\n * ReduxInput connects any standard input component to the redux store where a\n * \"standard input component\" is any component accepting e.g. value and onChange props.\n *\n * @param {function} Component - the component to connect to the store.\n * @param {function} selector - selects state containing the input value to be acted on from the redux store.\n * @param {function} action - the action to dispatch whenever the underlying onChange is fired.\n * @param {string|array} actOn - sub-path of the selected state to read/write the input value to.\n * @param {function} parse - a transformator to transform raw onChange value to store value.\n * @param {function} format - a transformator to transform store value to raw input value.\n * @param {object} props - props to be explicitly passed to the underlying Component\n */\nconst ReduxInput = ({\n  Component,\n  selector,\n  action,\n  actOn,\n  parse,\n  format,\n  valueProp = 'value',\n  props,\n  ...rest\n}) => {\n  const dispatch = useDispatch()\n  const { contextSelector, contextAction } = useContext(Context) || {}\n  const state = useSelector(selector || contextSelector || fallbackSelector)\n  const value = actOn ? path(toPath(actOn), state) : state\n  const formattedValue = typeof format === 'function' ? format(value) : value\n  const callback = (onChangeValue) => {\n    const eventValue = (onChangeValue?.target || {})[valueProp]\n    const nextValue = eventValue === undefined ? onChangeValue : eventValue\n    const parsedValue =\n      typeof parse === 'function' ? parse(nextValue) : nextValue\n    const finalPayload = actOn\n      ? assocPath(toPath(actOn), parsedValue, state)\n      : parsedValue\n    if (typeof action === 'function' || contextAction) {\n      dispatch((action || contextAction)(finalPayload))\n    }\n  }\n  return (\n    <Component\n      {...{ [valueProp]: formattedValue }}\n      onChange={callback}\n      {...props}\n      {...rest}\n    />\n  )\n}\n\nconst fallbackSelector = always({})\n\nconst toPath = (path) =>\n  toLodashPath(path).map((step) =>\n    step === String(Number(step)) ? Number(step) : step\n  )\n\nexport { ReduxInputContext, ReduxInput }\n","import { createAction } from '@reduxjs/toolkit'\n\nconst basicExampleInputChange = createAction('BASIC_EXAMPLE/CHANGE')\nconst actOnExampleInputChange = createAction('ACT_ON_EXAMPLE/CHANGE')\nconst contextExampleInputChange = createAction('CONTEXT_EXAMPLE/CHANGE')\n\nconst actions = {\n  basicExampleInputChange,\n  actOnExampleInputChange,\n  contextExampleInputChange\n}\n\nexport default actions\n","import React from 'react'\nimport { ReduxInput } from 'redux-input'\nimport { DatePicker } from 'antd'\n\nimport selectors from '../selectors'\nimport actions from '../actions'\n\nconst BasicExample = () => {\n  return (\n    <ReduxInput\n      Component={DatePicker}\n      selector={selectors.basicExampleInput}\n      action={actions.basicExampleInputChange}\n      size='large'\n    />\n  )\n}\n\nexport { BasicExample }\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport outdent from 'outdent'\nimport SyntaxHighlighter from 'react-syntax-highlighter'\nimport { docco } from 'react-syntax-highlighter/dist/esm/styles/hljs'\n\nimport selectors from '../selectors'\n\nconst ActOnExampleWrapper = ({ children }) => {\n  const actOnExampleStore = useSelector(selectors.actOnExampleStore)\n  return (\n    <>\n      <div className='Flex'>\n        <div className='Rendered'>\n          <h4>actOn example (using Ant Design Radio.Group): </h4>\n          {children}\n          <br />\n          <br />\n          The selector selects only state.actOn, but state.actOn.example.input is used for the value.\n          <br />\n          <br />\n          <SyntaxHighlighter language='javascript' style={docco}>\n            {outdent`\n              import React from 'react'\n              import { ReduxInput } from 'redux-input'\n              import { Radio } from 'antd'\n\n              import selectors from '../selectors'\n              import actions from '../actions'\n\n              const ActOnExample = () => {\n                return (\n                  <ReduxInput\n                    Component={Radio.Group}\n                    actOn='example.input'\n                    selector={selectors.actOn}\n                    action={actions.actOnExampleInputChange}\n                  >\n                    <Radio.Button value='option1'>Option 1</Radio.Button>\n                    <Radio.Button value='option2'>Option 2</Radio.Button>\n                  </ReduxInput>\n                )\n              }\n            `}\n          </SyntaxHighlighter>\n          <h4>Setup:</h4>\n          <SyntaxHighlighter language='javascript' style={docco}>\n            {outdent`\n              // selectors.js\n              const actOn = (state) => state.actOn\n\n              // actions.js\n              const actOnExampleInputChange = (payload) => ({\n                type: 'ACT_ON_EXAMPLE/CHANGE',\n                payload,\n              })\n\n              // reducer.js\n              import { createReducer } from '@reduxjs/toolkit'\n\n              actOn: createReducer({ example: { input: \"option1\" } }, {\n                'ACT_ON_EXAMPLE/CHANGE': (_, { payload }) => payload\n              })\n            `}\n          </SyntaxHighlighter>\n        </div>\n\n        <div>\n          <h4>STORE STATE: </h4>\n          <pre>{JSON.stringify(actOnExampleStore, null, 2)}</pre>\n        </div>\n      </div>\n    </>\n  )\n}\n\nexport { ActOnExampleWrapper }\n","import React from 'react'\nimport { ReduxInput } from 'redux-input'\nimport { Radio } from 'antd'\n\nimport selectors from '../selectors'\nimport actions from '../actions'\n\nconst ActOnExample = () => (\n  <ReduxInput\n    Component={Radio.Group}\n    actOn='example.input'\n    selector={selectors.actOn}\n    action={actions.actOnExampleInputChange}\n    style={{\n      padding: '10px 0'\n    }}\n  >\n    <Radio.Button value='option1'>Option 1</Radio.Button>\n    <Radio.Button value='option2'>Option 2</Radio.Button>\n  </ReduxInput>\n)\n\nexport { ActOnExample }\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport outdent from 'outdent'\nimport SyntaxHighlighter from 'react-syntax-highlighter'\nimport { docco } from 'react-syntax-highlighter/dist/esm/styles/hljs'\n\nimport selectors from '../selectors'\n\nconst ReduxInputContextExampleWrapper = ({ children }) => {\n  const store = useSelector(selectors.contextExampleStore)\n  return (\n    <>\n      <div className='Flex'>\n        <div className='Rendered'>\n          <h4>ReduxInputContext example (using Ant Design Components): </h4>\n          {children}\n          <br />\n          <br />\n          In conjunction with `actOn` this allows you to share a selector and action\n          <br/> across multiple inputs, but specifying them only once:\n          <br />\n          <br />\n          <SyntaxHighlighter language='javascript' style={docco}>\n            {outdent`\n              import React from 'react'\n              import { ReduxInput, ReduxInputContext } from 'redux-input'\n              import { Radio, Select } from 'antd'\n\n              import selectors from '../selectors'\n              import actions from '../actions'\n\n              const ReduxInputContextExample = () => {\n                return (\n                  <ReduxInputContext\n                    selector={selectors.contextExample}\n                    action={actions.contextExampleInputChange}\n                  >\n                    <ReduxInput\n                      Component={Radio.Group}\n                      actOn='example.input1'\n                    >\n                      <Radio.Button value='apples'>Apples</Radio.Button>\n                      <Radio.Button value='oranges'>Oranges</Radio.Button>\n                    </ReduxInput>\n\n                    <ReduxInput\n                      Component={Select}\n                      actOn='example.input2'\n                    >\n                      <Select.Option value='apples'>Apples</Select.Option>\n                      <Select.Option value='oranges'>Oranges</Select.Option>\n                    </ReduxInput>\n                  </ReduxInputContext>\n                )\n              }\n            `}\n          </SyntaxHighlighter>\n          <h4>Setup:</h4>\n          <SyntaxHighlighter language='javascript' style={docco}>\n            {outdent`\n              // selectors.js\n              export const contextExample = (state) => state.actOn\n\n              // actions.js\n              export const contextExampleInputChange = (payload) => ({\n                type: 'CONTEXT_EXAMPLE/CHANGE',\n                payload,\n              })\n\n              // reducer.js\n              import { createReducer } from '@reduxjs/toolkit'\n\n              contextExample: createReducer({ example: { input1: \"apples\" } }, {\n                'CONTEXT_EXAMPLE/CHANGE': (_, { payload }) => payload\n              })\n            `}\n          </SyntaxHighlighter>\n        </div>\n\n        <div>\n          <h4>STORE STATE: </h4>\n          <pre>{JSON.stringify(store, null, 2)}</pre>\n        </div>\n      </div>\n    </>\n  )\n}\n\nexport { ReduxInputContextExampleWrapper }\n","import React from 'react'\nimport { ReduxInput, ReduxInputContext } from 'redux-input'\nimport { Radio, Select } from 'antd'\n\nimport selectors from '../selectors'\nimport actions from '../actions'\n\nconst ReduxInputContextExample = () => {\n  return (\n    <ReduxInputContext\n      selector={selectors.contextExample}\n      action={actions.contextExampleInputChange}\n    >\n      <ReduxInput\n        Component={Radio.Group}\n        actOn='example.input1'\n      >\n        <Radio.Button value='apples'>Apples</Radio.Button>\n        <Radio.Button value='oranges'>Oranges</Radio.Button>\n      </ReduxInput>\n      <ReduxInput\n        Component={Select}\n        actOn='example.input2'\n        placeholder=\"Please select\"\n        style={{\n          minWidth: 200,\n          marginLeft: 20\n        }}\n      >\n        <Select.Option value='apples'>Apples</Select.Option>\n        <Select.Option value='oranges'>Oranges</Select.Option>\n      </ReduxInput>\n    </ReduxInputContext>\n  )\n}\n\nexport { ReduxInputContextExample }\n","import React from 'react'\nimport { Tabs } from 'antd'\n\nimport { BasicExampleWrapper } from './BasicExampleWrapper'\nimport { BasicExample } from './BasicExample'\nimport { ActOnExampleWrapper } from './ActOnExampleWrapper'\nimport { ActOnExample } from './ActOnExample'\nimport { ReduxInputContextExampleWrapper } from './ReduxInputContextExampleWrapper'\nimport { ReduxInputContextExample } from './ReduxInputContextExample'\n\nconst { TabPane } = Tabs\n\nconst Page = ({ children }) => {\n  return (\n    <div className='Page'>\n      <h1>Redux Input</h1>\n      <Tabs defaultActiveKey='1' size='large' animated={false}>\n        <TabPane tab='Basic Example' key='1'>\n          <br />\n          <BasicExampleWrapper>\n            <BasicExample />\n          </BasicExampleWrapper>\n        </TabPane>\n        <TabPane tab='`actOn` Example' key='2'>\n          <br />\n          <ActOnExampleWrapper>\n            <ActOnExample />\n          </ActOnExampleWrapper>\n        </TabPane>\n        <TabPane tab='ReduxInputContext Example' key='3'>\n          <ReduxInputContextExampleWrapper>\n            <ReduxInputContextExample />\n          </ReduxInputContextExampleWrapper>\n        </TabPane>\n      </Tabs>\n    </div>\n  )\n}\n\nexport default Page\n","import { createReducer, combineReducers } from '@reduxjs/toolkit'\n\nimport actions from './actions'\n\nconst INITIAL_STATE = {\n  basic: {\n    example: {\n      input: null\n    }\n  },\n  actOn: {\n    example: {\n      input: \"option1\",\n    }\n  },\n  contextExample: {\n    example: {\n      input1: \"apples\",\n    }\n  }\n}\n\nconst reducer = combineReducers({\n  basic: combineReducers({\n    example: combineReducers({\n      input: createReducer(INITIAL_STATE.basic.example.input, {\n        [actions.basicExampleInputChange]: (_, { payload }) => payload\n      })\n    })\n  }),\n  actOn: createReducer(INITIAL_STATE.actOn, {\n    [actions.actOnExampleInputChange]: (_, { payload }) => payload\n  }),\n  contextExample: createReducer(INITIAL_STATE.contextExample, {\n    [actions.contextExampleInputChange]: (_, { payload }) => payload\n  })\n})\n\nexport default reducer\n","import React from 'react'\nimport { configureStore } from '@reduxjs/toolkit'\nimport { Provider } from 'react-redux'\nimport 'antd/dist/antd.css'\n\nimport Page from './components/Page'\nimport reducer from './reducer'\n\nconst store = configureStore({ reducer })\n\nconst App = () => (\n  <Provider store={store}>\n    <Page>hello</Page>\n  </Provider>\n)\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}